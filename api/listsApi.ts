/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2023-07-15
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import axios, {AxiosRequestConfig, AxiosResponse} from "axios";
import http from 'http';
import { backOff, BackoffOptions } from 'exponential-backoff';

/* tslint:disable:no-unused-locals */
import { GetCreateVariantsJobs5XXResponse } from '../model/getCreateVariantsJobs5XXResponse';
import { GetListListResponseCollectionCompoundDocument } from '../model/getListListResponseCollectionCompoundDocument';
import { GetListRelationshipsResponseCollection } from '../model/getListRelationshipsResponseCollection';
import { GetListRetrieveResponseCompoundDocument } from '../model/getListRetrieveResponseCompoundDocument';
import { GetListTagRelationshipListResponseCollection } from '../model/getListTagRelationshipListResponseCollection';
import { GetProfileResponseCollection } from '../model/getProfileResponseCollection';
import { GetTagResponseCollection } from '../model/getTagResponseCollection';
import { ListCreateQuery } from '../model/listCreateQuery';
import { ListMembersAddQuery } from '../model/listMembersAddQuery';
import { ListMembersDeleteQuery } from '../model/listMembersDeleteQuery';
import { ListPartialUpdateQuery } from '../model/listPartialUpdateQuery';
import { PatchListPartialUpdateResponse } from '../model/patchListPartialUpdateResponse';
import { PostListCreateResponse } from '../model/postListCreateResponse';

import { ObjectSerializer, Authentication } from '../model/models';
import { ApiKeyAuth } from '../model/models';

import {ApiClient, KlaviyoApiKey, queryParamPreProcessor, RetryOptions} from './apis';

let defaultBasePath = 'https://a.klaviyo.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================


export class ListsApi {

    protected backoffOptions: BackoffOptions = new RetryOptions().options

    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {
        revision: "2023-07-15",
        "User-Agent": "klaviyo-api-node/5.0.0-beta.1"
    };
    protected _useQuerystring : boolean = false;

    protected _keyPrefix = "Klaviyo-API-Key"

    protected authentications = {
        'Klaviyo-API-Key': new ApiKeyAuth('header', 'Authorization'),
    }

    constructor(apiKeyInfo: string | ApiClient, retryOptions?: RetryOptions){
        if(apiKeyInfo){
            if (typeof apiKeyInfo == 'string') {
                this.setApiKey(KlaviyoApiKey.KeyName, apiKeyInfo)
            } else {
                this.setApiKey(KlaviyoApiKey.KeyName, apiKeyInfo.apiKey)
                this.backoffOptions = apiKeyInfo.retryOptions.options
            }
        }
        if (retryOptions){
            this.backoffOptions = retryOptions.options
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setApiKey(key: KlaviyoApiKey, value: string) {
        this.authentications[key].apiKey = `${this._keyPrefix} ${value}`;
    }

    /**
     * Create a new list.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `list:write`
     * @summary Create List
     * @param listCreateQuery 
     
     */
    public async createList (listCreateQuery: ListCreateQuery, ): Promise<{ response: AxiosResponse; body: PostListCreateResponse;  }> {

        const localVarPath = this.basePath + '/api/lists/';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'listCreateQuery' is not null or undefined
        if (listCreateQuery === null || listCreateQuery === undefined) {
            throw new Error('Required parameter listCreateQuery was null or undefined when calling createList.');
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'POST',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
            data: ObjectSerializer.serialize(listCreateQuery, "ListCreateQuery")
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: PostListCreateResponse;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: PostListCreateResponse;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "PostListCreateResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Add a profile to a list with the given list ID. It is recommended that you use the [Subscribe Profiles endpoint](https://developers.klaviyo.com/en/reference/subscribe_profiles) if you\'re trying to give a profile consent to receive email marketing. This endpoint accepts a maximum of 1000 profiles per call.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `list:write` `profiles:write`
     * @summary Add Profile To List
     * @param id * @param listMembersAddQuery 
     
     */
    public async createListRelationships (id: string, listMembersAddQuery: ListMembersAddQuery, ): Promise<{ response: AxiosResponse; body?: any;  }> {

        const localVarPath = this.basePath + '/api/lists/{id}/relationships/profiles/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createListRelationships.');
        }

        // verify required parameter 'listMembersAddQuery' is not null or undefined
        if (listMembersAddQuery === null || listMembersAddQuery === undefined) {
            throw new Error('Required parameter listMembersAddQuery was null or undefined when calling createListRelationships.');
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'POST',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
            data: ObjectSerializer.serialize(listMembersAddQuery, "ListMembersAddQuery")
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body?: any;  }>( () => {
            return new Promise<{ response: AxiosResponse; body?: any;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Delete a list with the given list ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `list:write`
     * @summary Delete List
     * @param id Primary key that uniquely identifies this list. Generated by Klaviyo.
     
     */
    public async deleteList (id: string, ): Promise<{ response: AxiosResponse; body?: any;  }> {

        const localVarPath = this.basePath + '/api/lists/{id}/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteList.');
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body?: any;  }>( () => {
            return new Promise<{ response: AxiosResponse; body?: any;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Remove a profile from a list with the given list ID. The provided profile will no longer receive marketing from this particular list once removed. Removing a profile from a list will not impact the profile\'s consent status or subscription status in general. To update a profile\'s subscription status, please use the [Unsubscribe Profiles endpoint](https://developers.klaviyo.com/en/reference/unsubscribe_profiles). This endpoint accepts a maximum of 1000 profiles per call.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `list:write` `profiles:write`
     * @summary Remove Profile From List
     * @param id * @param listMembersDeleteQuery 
     
     */
    public async deleteListRelationships (id: string, listMembersDeleteQuery: ListMembersDeleteQuery, ): Promise<{ response: AxiosResponse; body?: any;  }> {

        const localVarPath = this.basePath + '/api/lists/{id}/relationships/profiles/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteListRelationships.');
        }

        // verify required parameter 'listMembersDeleteQuery' is not null or undefined
        if (listMembersDeleteQuery === null || listMembersDeleteQuery === undefined) {
            throw new Error('Required parameter listMembersDeleteQuery was null or undefined when calling deleteListRelationships.');
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
            data: ObjectSerializer.serialize(listMembersDeleteQuery, "ListMembersDeleteQuery")
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body?: any;  }>( () => {
            return new Promise<{ response: AxiosResponse; body?: any;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Get a list with the given list ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`<br><br>Rate limits when using the `additional-fields[list]=profile_count` parameter in your API request:<br>Burst: `1/s`<br>Steady: `15/m`<br><br>To learn more about how the `additional-fields` parameter impacts rate limits, check out our [Rate limits, status codes, and errors](https://developers.klaviyo.com/en/v2023-07-15/docs/rate_limits_and_error_handling) guide.  **Scopes:** `list:read`
     * @summary Get List
     * @param id Primary key that uniquely identifies this list. Generated by Klaviyo.
     * @param options Contains any of the following optional parameters: additionalFieldsList, fieldsList, fieldsTag, include, 
     */
    public async getList (id: string, options: { additionalFieldsList?: Array<'profile_count'>, fieldsList?: Array<'name' | 'created' | 'updated' | 'profile_count'>, fieldsTag?: Array<'name'>, include?: Array<'tags'>,  } = {}): Promise<{ response: AxiosResponse; body: GetListRetrieveResponseCompoundDocument;  }> {

        const localVarPath = this.basePath + '/api/lists/{id}/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getList.');
        }

        if (options.additionalFieldsList !== undefined) {
            localVarQueryParameters['additional-fields[list]'] = ObjectSerializer.serialize(options.additionalFieldsList, "Array<'profile_count'>");
        }

        if (options.fieldsList !== undefined) {
            localVarQueryParameters['fields[list]'] = ObjectSerializer.serialize(options.fieldsList, "Array<'name' | 'created' | 'updated' | 'profile_count'>");
        }

        if (options.fieldsTag !== undefined) {
            localVarQueryParameters['fields[tag]'] = ObjectSerializer.serialize(options.fieldsTag, "Array<'name'>");
        }

        if (options.include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(options.include, "Array<'tags'>");
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'GET',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: GetListRetrieveResponseCompoundDocument;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: GetListRetrieveResponseCompoundDocument;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "GetListRetrieveResponseCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Get all profiles within a list with the given list ID. Filter to request a subset of all profiles. Profiles can be filtered by `email`, `phone_number`, and `push_token` fields.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`<br><br>Rate limits when using the `additional-fields[profile]=predictive_analytics` parameter in your API request:<br>Burst: `10/s`<br>Steady: `150/m`<br><br>To learn more about how the `additional-fields` parameter impacts rate limits, check out our [Rate limits, status codes, and errors](https://developers.klaviyo.com/en/v2023-07-15/docs/rate_limits_and_error_handling) guide.  **Scopes:** `list:read` `profiles:read`
     * @summary Get List Profiles
     * @param id 
     * @param options Contains any of the following optional parameters: additionalFieldsProfile, fieldsProfile, filter, pageCursor, pageSize, 
     */
    public async getListProfiles (id: string, options: { additionalFieldsProfile?: Array<'predictive_analytics'>, fieldsProfile?: Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail' | 'predictive_analytics' | 'predictive_analytics.historic_clv' | 'predictive_analytics.predicted_clv' | 'predictive_analytics.total_clv' | 'predictive_analytics.historic_number_of_orders' | 'predictive_analytics.predicted_number_of_orders' | 'predictive_analytics.average_days_between_orders' | 'predictive_analytics.average_order_value' | 'predictive_analytics.churn_probability' | 'predictive_analytics.expected_date_of_next_order'>, filter?: string, pageCursor?: string, pageSize?: number,  } = {}): Promise<{ response: AxiosResponse; body: GetProfileResponseCollection;  }> {

        const localVarPath = this.basePath + '/api/lists/{id}/profiles/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getListProfiles.');
        }

        if (options.additionalFieldsProfile !== undefined) {
            localVarQueryParameters['additional-fields[profile]'] = ObjectSerializer.serialize(options.additionalFieldsProfile, "Array<'predictive_analytics'>");
        }

        if (options.fieldsProfile !== undefined) {
            localVarQueryParameters['fields[profile]'] = ObjectSerializer.serialize(options.fieldsProfile, "Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail' | 'predictive_analytics' | 'predictive_analytics.historic_clv' | 'predictive_analytics.predicted_clv' | 'predictive_analytics.total_clv' | 'predictive_analytics.historic_number_of_orders' | 'predictive_analytics.predicted_number_of_orders' | 'predictive_analytics.average_days_between_orders' | 'predictive_analytics.average_order_value' | 'predictive_analytics.churn_probability' | 'predictive_analytics.expected_date_of_next_order'>");
        }

        if (options.filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(options.filter, "string");
        }

        if (options.pageCursor !== undefined) {
            localVarQueryParameters['page[cursor]'] = ObjectSerializer.serialize(options.pageCursor, "string");
        }

        if (options.pageSize !== undefined) {
            localVarQueryParameters['page[size]'] = ObjectSerializer.serialize(options.pageSize, "number");
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'GET',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: GetProfileResponseCollection;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: GetProfileResponseCollection;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "GetProfileResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Get profile membership [relationships](https://developers.klaviyo.com/en/reference/api_overview#relationships) for a list with the given list ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `list:read` `profiles:read`
     * @summary Get List Relationships Profiles
     * @param id 
     * @param options Contains any of the following optional parameters: pageCursor, 
     */
    public async getListRelationshipsProfiles (id: string, options: { pageCursor?: string,  } = {}): Promise<{ response: AxiosResponse; body: GetListRelationshipsResponseCollection;  }> {

        const localVarPath = this.basePath + '/api/lists/{id}/relationships/profiles/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getListRelationshipsProfiles.');
        }

        if (options.pageCursor !== undefined) {
            localVarQueryParameters['page[cursor]'] = ObjectSerializer.serialize(options.pageCursor, "string");
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'GET',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: GetListRelationshipsResponseCollection;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: GetListRelationshipsResponseCollection;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "GetListRelationshipsResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Returns the tag IDs of all tags associated with the given list.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `list:read` `tags:read`
     * @summary Get List Relationships Tags
     * @param id 
     
     */
    public async getListRelationshipsTags (id: string, ): Promise<{ response: AxiosResponse; body: GetListTagRelationshipListResponseCollection;  }> {

        const localVarPath = this.basePath + '/api/lists/{id}/relationships/tags/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getListRelationshipsTags.');
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'GET',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: GetListTagRelationshipListResponseCollection;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: GetListTagRelationshipListResponseCollection;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "GetListTagRelationshipListResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Return all tags associated with the given list ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `list:read` `tags:read`
     * @summary Get List Tags
     * @param id 
     * @param options Contains any of the following optional parameters: fieldsTag, 
     */
    public async getListTags (id: string, options: { fieldsTag?: Array<'name'>,  } = {}): Promise<{ response: AxiosResponse; body: GetTagResponseCollection;  }> {

        const localVarPath = this.basePath + '/api/lists/{id}/tags/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getListTags.');
        }

        if (options.fieldsTag !== undefined) {
            localVarQueryParameters['fields[tag]'] = ObjectSerializer.serialize(options.fieldsTag, "Array<'name'>");
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'GET',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: GetTagResponseCollection;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: GetTagResponseCollection;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "GetTagResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Get all lists in an account. Filter to request a subset of all lists. Lists can be filtered by `id`, `name`, `created`, and `updated` fields. Returns a maximum of 10 results per page.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `list:read`
     * @summary Get Lists
     
     * @param options Contains any of the following optional parameters: fieldsList, fieldsTag, filter, include, pageCursor, 
     */
    public async getLists (options: { fieldsList?: Array<'name' | 'created' | 'updated'>, fieldsTag?: Array<'name'>, filter?: string, include?: Array<'tags'>, pageCursor?: string,  } = {}): Promise<{ response: AxiosResponse; body: GetListListResponseCollectionCompoundDocument;  }> {

        const localVarPath = this.basePath + '/api/lists/';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        if (options.fieldsList !== undefined) {
            localVarQueryParameters['fields[list]'] = ObjectSerializer.serialize(options.fieldsList, "Array<'name' | 'created' | 'updated'>");
        }

        if (options.fieldsTag !== undefined) {
            localVarQueryParameters['fields[tag]'] = ObjectSerializer.serialize(options.fieldsTag, "Array<'name'>");
        }

        if (options.filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(options.filter, "string");
        }

        if (options.include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(options.include, "Array<'tags'>");
        }

        if (options.pageCursor !== undefined) {
            localVarQueryParameters['page[cursor]'] = ObjectSerializer.serialize(options.pageCursor, "string");
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'GET',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: GetListListResponseCollectionCompoundDocument;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: GetListListResponseCollectionCompoundDocument;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "GetListListResponseCollectionCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Update the name of a list with the given list ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `list:write`
     * @summary Update List
     * @param id Primary key that uniquely identifies this list. Generated by Klaviyo.* @param listPartialUpdateQuery 
     
     */
    public async updateList (id: string, listPartialUpdateQuery: ListPartialUpdateQuery, ): Promise<{ response: AxiosResponse; body: PatchListPartialUpdateResponse;  }> {

        const localVarPath = this.basePath + '/api/lists/{id}/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateList.');
        }

        // verify required parameter 'listPartialUpdateQuery' is not null or undefined
        if (listPartialUpdateQuery === null || listPartialUpdateQuery === undefined) {
            throw new Error('Required parameter listPartialUpdateQuery was null or undefined when calling updateList.');
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
            data: ObjectSerializer.serialize(listPartialUpdateQuery, "ListPartialUpdateQuery")
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: PatchListPartialUpdateResponse;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: PatchListPartialUpdateResponse;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "PatchListPartialUpdateResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
}
