/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2023-07-15
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import axios, {AxiosRequestConfig, AxiosResponse} from "axios";
import http from 'http';
import { backOff, BackoffOptions } from 'exponential-backoff';

/* tslint:disable:no-unused-locals */
import { EventCreateQueryV2 } from '../model/eventCreateQueryV2';
import { GetCreateVariantsJobs5XXResponse } from '../model/getCreateVariantsJobs5XXResponse';
import { GetEventMetricsRelationshipListResponse } from '../model/getEventMetricsRelationshipListResponse';
import { GetEventProfilesRelationshipListResponse } from '../model/getEventProfilesRelationshipListResponse';
import { GetEventResponseCollectionCompoundDocument } from '../model/getEventResponseCollectionCompoundDocument';
import { GetEventResponseCompoundDocument } from '../model/getEventResponseCompoundDocument';
import { GetMetricResponse } from '../model/getMetricResponse';
import { GetProfileResponse } from '../model/getProfileResponse';

import { ObjectSerializer, Authentication } from '../model/models';
import { ApiKeyAuth } from '../model/models';

import {ApiClient, KlaviyoApiKey, queryParamPreProcessor, RetryOptions} from './apis';

let defaultBasePath = 'https://a.klaviyo.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================


export class EventsApi {

    protected backoffOptions: BackoffOptions = new RetryOptions().options

    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {
        revision: "2023-07-15",
        "User-Agent": "klaviyo-api-node/5.0.0-beta.1"
    };
    protected _useQuerystring : boolean = false;

    protected _keyPrefix = "Klaviyo-API-Key"

    protected authentications = {
        'Klaviyo-API-Key': new ApiKeyAuth('header', 'Authorization'),
    }

    constructor(apiKeyInfo: string | ApiClient, retryOptions?: RetryOptions){
        if(apiKeyInfo){
            if (typeof apiKeyInfo == 'string') {
                this.setApiKey(KlaviyoApiKey.KeyName, apiKeyInfo)
            } else {
                this.setApiKey(KlaviyoApiKey.KeyName, apiKeyInfo.apiKey)
                this.backoffOptions = apiKeyInfo.retryOptions.options
            }
        }
        if (retryOptions){
            this.backoffOptions = retryOptions.options
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setApiKey(key: KlaviyoApiKey, value: string) {
        this.authentications[key].apiKey = `${this._keyPrefix} ${value}`;
    }

    /**
     * Create a new event to track a profile\'s activity. Successful response indicates that the event was validated and submitted for processing, but does not guarantee that processing is complete.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `events:write`
     * @summary Create Event
     * @param eventCreateQueryV2 
     
     */
    public async createEvent (eventCreateQueryV2: EventCreateQueryV2, ): Promise<{ response: AxiosResponse; body?: any;  }> {

        const localVarPath = this.basePath + '/api/events/';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'eventCreateQueryV2' is not null or undefined
        if (eventCreateQueryV2 === null || eventCreateQueryV2 === undefined) {
            throw new Error('Required parameter eventCreateQueryV2 was null or undefined when calling createEvent.');
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'POST',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
            data: ObjectSerializer.serialize(eventCreateQueryV2, "EventCreateQueryV2")
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body?: any;  }>( () => {
            return new Promise<{ response: AxiosResponse; body?: any;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Get an event with the given event ID. Include parameters can be provided to get the following related resource data: `metrics`, `profiles`<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `events:read`
     * @summary Get Event
     * @param id ID of the event
     * @param options Contains any of the following optional parameters: fieldsEvent, fieldsMetric, fieldsProfile, include, 
     */
    public async getEvent (id: string, options: { fieldsEvent?: Array<'timestamp' | 'event_properties' | 'datetime' | 'uuid'>, fieldsMetric?: Array<'name' | 'created' | 'updated' | 'integration'>, fieldsProfile?: Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail'>, include?: Array<'metric' | 'profile'>,  } = {}): Promise<{ response: AxiosResponse; body: GetEventResponseCompoundDocument;  }> {

        const localVarPath = this.basePath + '/api/events/{id}/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEvent.');
        }

        if (options.fieldsEvent !== undefined) {
            localVarQueryParameters['fields[event]'] = ObjectSerializer.serialize(options.fieldsEvent, "Array<'timestamp' | 'event_properties' | 'datetime' | 'uuid'>");
        }

        if (options.fieldsMetric !== undefined) {
            localVarQueryParameters['fields[metric]'] = ObjectSerializer.serialize(options.fieldsMetric, "Array<'name' | 'created' | 'updated' | 'integration'>");
        }

        if (options.fieldsProfile !== undefined) {
            localVarQueryParameters['fields[profile]'] = ObjectSerializer.serialize(options.fieldsProfile, "Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail'>");
        }

        if (options.include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(options.include, "Array<'metric' | 'profile'>");
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'GET',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: GetEventResponseCompoundDocument;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: GetEventResponseCompoundDocument;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "GetEventResponseCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Get the metric for an event with the given event ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `events:read` `metrics:read`
     * @summary Get Event Metric
     * @param id 
     * @param options Contains any of the following optional parameters: fieldsMetric, 
     */
    public async getEventMetric (id: string, options: { fieldsMetric?: Array<'name' | 'created' | 'updated' | 'integration'>,  } = {}): Promise<{ response: AxiosResponse; body: GetMetricResponse;  }> {

        const localVarPath = this.basePath + '/api/events/{id}/metric/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEventMetric.');
        }

        if (options.fieldsMetric !== undefined) {
            localVarQueryParameters['fields[metric]'] = ObjectSerializer.serialize(options.fieldsMetric, "Array<'name' | 'created' | 'updated' | 'integration'>");
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'GET',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: GetMetricResponse;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: GetMetricResponse;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "GetMetricResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Get the profile associated with an event with the given event ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `events:read` `profiles:read`
     * @summary Get Event Profile
     * @param id 
     * @param options Contains any of the following optional parameters: additionalFieldsProfile, fieldsProfile, 
     */
    public async getEventProfile (id: string, options: { additionalFieldsProfile?: Array<'predictive_analytics'>, fieldsProfile?: Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail' | 'predictive_analytics' | 'predictive_analytics.historic_clv' | 'predictive_analytics.predicted_clv' | 'predictive_analytics.total_clv' | 'predictive_analytics.historic_number_of_orders' | 'predictive_analytics.predicted_number_of_orders' | 'predictive_analytics.average_days_between_orders' | 'predictive_analytics.average_order_value' | 'predictive_analytics.churn_probability' | 'predictive_analytics.expected_date_of_next_order'>,  } = {}): Promise<{ response: AxiosResponse; body: GetProfileResponse;  }> {

        const localVarPath = this.basePath + '/api/events/{id}/profile/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEventProfile.');
        }

        if (options.additionalFieldsProfile !== undefined) {
            localVarQueryParameters['additional-fields[profile]'] = ObjectSerializer.serialize(options.additionalFieldsProfile, "Array<'predictive_analytics'>");
        }

        if (options.fieldsProfile !== undefined) {
            localVarQueryParameters['fields[profile]'] = ObjectSerializer.serialize(options.fieldsProfile, "Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail' | 'predictive_analytics' | 'predictive_analytics.historic_clv' | 'predictive_analytics.predicted_clv' | 'predictive_analytics.total_clv' | 'predictive_analytics.historic_number_of_orders' | 'predictive_analytics.predicted_number_of_orders' | 'predictive_analytics.average_days_between_orders' | 'predictive_analytics.average_order_value' | 'predictive_analytics.churn_probability' | 'predictive_analytics.expected_date_of_next_order'>");
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'GET',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: GetProfileResponse;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: GetProfileResponse;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "GetProfileResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Get a list of related Metrics for an Event<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `events:read` `metrics:read`
     * @summary Get Event Relationships Metric
     * @param id 
     
     */
    public async getEventRelationshipsMetric (id: string, ): Promise<{ response: AxiosResponse; body: GetEventMetricsRelationshipListResponse;  }> {

        const localVarPath = this.basePath + '/api/events/{id}/relationships/metric/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEventRelationshipsMetric.');
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'GET',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: GetEventMetricsRelationshipListResponse;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: GetEventMetricsRelationshipListResponse;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "GetEventMetricsRelationshipListResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Get profile [relationships](https://developers.klaviyo.com/en/reference/api_overview#relationships) for an event with the given event ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `events:read` `profiles:read`
     * @summary Get Event Relationships Profile
     * @param id 
     
     */
    public async getEventRelationshipsProfile (id: string, ): Promise<{ response: AxiosResponse; body: GetEventProfilesRelationshipListResponse;  }> {

        const localVarPath = this.basePath + '/api/events/{id}/relationships/profile/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEventRelationshipsProfile.');
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'GET',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: GetEventProfilesRelationshipListResponse;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: GetEventProfilesRelationshipListResponse;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "GetEventProfilesRelationshipListResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
    /**
     * Get all events in an account Requests can be sorted by the following fields: `datetime`, `timestamp` Include parameters can be provided to get the following related resource data: `metrics`, `profiles` Returns a maximum of 200 events per page.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `events:read`
     * @summary Get Events
     
     * @param options Contains any of the following optional parameters: fieldsEvent, fieldsMetric, fieldsProfile, filter, include, pageCursor, sort, 
     */
    public async getEvents (options: { fieldsEvent?: Array<'timestamp' | 'event_properties' | 'datetime' | 'uuid'>, fieldsMetric?: Array<'name' | 'created' | 'updated' | 'integration'>, fieldsProfile?: Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail'>, filter?: string, include?: Array<'metric' | 'profile'>, pageCursor?: string, sort?: 'datetime' | '-datetime' | 'timestamp' | '-timestamp',  } = {}): Promise<{ response: AxiosResponse; body: GetEventResponseCollectionCompoundDocument;  }> {

        const localVarPath = this.basePath + '/api/events/';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        if (options.fieldsEvent !== undefined) {
            localVarQueryParameters['fields[event]'] = ObjectSerializer.serialize(options.fieldsEvent, "Array<'timestamp' | 'event_properties' | 'datetime' | 'uuid'>");
        }

        if (options.fieldsMetric !== undefined) {
            localVarQueryParameters['fields[metric]'] = ObjectSerializer.serialize(options.fieldsMetric, "Array<'name' | 'created' | 'updated' | 'integration'>");
        }

        if (options.fieldsProfile !== undefined) {
            localVarQueryParameters['fields[profile]'] = ObjectSerializer.serialize(options.fieldsProfile, "Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail'>");
        }

        if (options.filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(options.filter, "string");
        }

        if (options.include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(options.include, "Array<'metric' | 'profile'>");
        }

        if (options.pageCursor !== undefined) {
            localVarQueryParameters['page[cursor]'] = ObjectSerializer.serialize(options.pageCursor, "string");
        }

        if (options.sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(options.sort, "'datetime' | '-datetime' | 'timestamp' | '-timestamp'");
        }


        queryParamPreProcessor(localVarQueryParameters)

        let config: AxiosRequestConfig = {
            method: 'GET',
            url: localVarPath,
            headers: localVarHeaderParams,
            params: localVarQueryParameters,
        }

        if (this.authentications["Klaviyo-API-Key"].apiKey) {
            this.authentications["Klaviyo-API-Key"].applyToRequest(config);
        } else {
            if (ApiClient.instance.apiKey && config.headers) {
                config.headers['Authorization'] = `${this._keyPrefix} ${ApiClient.instance.apiKey}`
                this.backoffOptions = ApiClient.instance.retryOptions.options
            } else {
                throw Error ("No API Key set")
            }
        }

        return backOff<{ response: AxiosResponse; body: GetEventResponseCollectionCompoundDocument;  }>( () => {
            return new Promise<{ response: AxiosResponse; body: GetEventResponseCollectionCompoundDocument;  }>((resolve, reject) => {
                axios(config)
                    .then(axiosResponse => {
                        let body;
                        body = ObjectSerializer.deserialize(axiosResponse.data, "GetEventResponseCollectionCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                    .catch(error => {
                        reject(error);
                    })
            });
        }, this.backoffOptions);
    }
}
